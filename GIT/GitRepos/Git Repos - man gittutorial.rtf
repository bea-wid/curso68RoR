{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 Last login: Fri Jun  4 01:06:37 on ttys000\
MacBook-Pro-de-Nadia:~ bea$ man gittutorial\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
       searches for all occurrences of "hello" in v2.5.\
\
       If you leave out the commit name, \ul git\ulnone  \ul grep\ulnone  will search any of the files\
       it manages in your current directory. So\
\
           $ git grep "hello"\
\
       is a quick way to search just the files that are tracked by Git.\
\
       Many Git commands also take sets of commits, which can be specified in\
       a number of ways. Here are some examples with \ul git\ulnone  \ul log\ulnone :\
\
           $ git log v2.5..v2.6            # commits between v2.5 and v2.6\
           $ git log v2.5..                # commits since v2.5\
           $ git log --since="2 weeks ago" # commits from the last 2 weeks\
           $ git log v2.5.. Makefile       # commits since v2.5 which modify\
                                           # Makefile\
\
       You can also give \ul git\ulnone  \ul log\ulnone  a "range" of commits where the first is not\
       necessarily an ancestor of the second; for example, if the tips of the\
       branches "stable" and "master" diverged from a common commit some time\
       ago, then\
:\
}